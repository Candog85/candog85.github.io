export declare const form: import("tailwind-variants").TVReturnType<{
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}, {
    label: string;
    input: string;
    message: string;
    icon: string;
    field: string;
    textarea: string;
}, undefined, import("tailwind-variants/dist/config").TVConfig<{
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}, {
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}>, {
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}, {
    label: string;
    input: string;
    message: string;
    icon: string;
    field: string;
    textarea: string;
}, import("tailwind-variants").TVReturnType<{
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}, {
    label: string;
    input: string;
    message: string;
    icon: string;
    field: string;
    textarea: string;
}, undefined, import("tailwind-variants/dist/config").TVConfig<{
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}, {
    variant: {
        outlined: {
            input: string;
        };
        soft: {
            input: string;
        };
        mixed: {
            input: string;
        };
        plain: {
            input: string;
        };
        bottomOutlined: {
            input: string;
        };
    };
    size: {
        xs: {
            message: string;
        };
        sm: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        md: {
            label: string;
            message: string;
            input: string;
            field: string;
        };
        lg: {
            label: string;
            input: string;
            field: string;
        };
        xl: {
            label: string;
            input: string;
            field: string;
        };
    };
    fancy: {
        input: string;
    };
    floating: {
        true: {
            label: string;
        };
    };
    asTextarea: {
        true: {
            label: string;
        };
    };
}>, unknown, unknown, undefined>>;
export type FormProps = {
    variant?: keyof typeof form.variants.variant;
    size?: keyof typeof form.variants.size;
    floating?: boolean;
    asTextarea?: boolean;
};
export type InputProps = Omit<FormProps, "asTextarea"> & {
    size?: Exclude<FormProps["size"], "xs">;
    fancy?: boolean;
};
export type LabelProps = FormProps & {
    size?: Exclude<FormProps["size"], "xs">;
};
export type MessageProps = {
    size?: Exclude<FormProps["size"], "lg" | "xl">;
};
